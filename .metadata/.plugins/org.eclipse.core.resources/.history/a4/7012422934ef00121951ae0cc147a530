package server;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;

import server.utility.StringParser;


public class MathProtocol {
	private static final int WAITING = 0;
	private static final int REQUEST_METHOD_NAME = 1;
	private static final int GET_OBJECT_PARAMS = 2;
	private static final int CREATE_CLASS = 3;
	private static final int REQUEST_PARAMETERS = 4;
	private static final int INVOKE_METHOD = 5;
	
	private String MethodName = "";
	private Object CurrentInstance = null;
	private Class CurrentClass = null;
	private ArrayList<Object> params;
	
	private int state = WAITING; //default state when the server starts
	
	public String processInput(String in)
	{
		String out = null;
		String output = "";
		
		if(state == WAITING) //in = null or is just empty to move forward
		{
			MethodName = "";
			CurrentInstance = null;
			CurrentClass = null;
			out = "What class would you like to use? Use the fully-qualified name (eg test.java3.notmathlogic.TestClass)";
			state = GET_OBJECT_PARAMS;
		}
		else if(state == GET_OBJECT_PARAMS) //in = classname, find that class
		{
			try {
				CurrentClass = Class.forName(in);
				//CurrentInstance = CurrentClass.newInstance();
			} catch (ClassNotFoundException e) {
				output = "Class was not found. Hit enter to try again.";
				state = WAITING;
				return output;
			}
			
			output = "Class found. The constructor requires the following parameters: ";
			Constructor requested = CurrentClass.getConstructors()[0];
			Class[] params = requested.getParameterTypes();
			for(Class param : params)
			{
				output += param.getName() + ", ";
			}
			if(output.endsWith(", "))
			{
				output = output.substring(0, output.length() - 2);
				output += ". Enter semicolons between different paramaters. Write new objects in the form [new edu.csc380.TestClass(12,\"somestringvalue\");14] without the brackets. (for example, if you were trying to use a class called \'edu.MathLogic\' and the MathLogic constructor took in a Logic object and an int, and the logic constructor needed a boolean as an input, the input string would looke like \"new Logic(true);16\"";
				state = CREATE_CLASS;
			}
			else
			{
				output += "None! Hit enter to continue.";
				state = REQUEST_METHOD_NAME;
			}
			out = output;
		}
		else if(state == CREATE_CLASS)
		{
			//in = string used to determine the shit to make the class
			
			String[] diffParamsAsStrings = in.split(";");
			Object[] paramsForCtor = new Object[diffParamsAsStrings.length];
			for(int i = 0; i< paramsForCtor.length; i++)
			{
				try {
					paramsForCtor[i] = StringParser.parseFromString(diffParamsAsStrings[i]);
				} catch (ClassNotFoundException | InstantiationException
						| IllegalAccessException | IllegalArgumentException
						| InvocationTargetException | SecurityException e) {
					// TODO Auto-generated catch block
					out = "An error occurred during class creation.";
					state = WAITING;
					return out;
				}
			}
			out = "Class created successfully.";
			state = REQUEST_METHOD_NAME;
		}
		else if(state == REQUEST_METHOD_NAME )
		{
			
			
			
			
			output = "What method would you like to call? Type in the name of the method you would like to choose from the following list: ";
			Method[] methods = CurrentClass.getDeclaredMethods();
			for(Method	 current : methods)
			{
				output += current.getName()+ ", ";
				
			}
			output = output.substring(0, output.length()-2);
			out = output;
			state = REQUEST_PARAMETERS;
		}
		else if (state == REQUEST_PARAMETERS) //in = methodname, find that method
		{
			
			MethodName = in;
			Method requested = null;
			Method[] methods = CurrentClass.getDeclaredMethods();
			for(Method m : methods)
			{
				if(m.getName().equals(MethodName))
				{
					requested = m;
					break;
				}
			}
			if(requested == null)
			{
				out = "The method your requested does not exist or was spelled wrong. The server is restarting.";
				MethodName = "";
				state = WAITING;
				return out;
			}
			else
			{
				Class[] params = requested.getParameterTypes();
				output = "The method requires the following as parameters (please enter them separated by commas [eg 12, 13]): ";
				for(Class param : params)
				{
					output += param.getName() + ", ";
				}
				output = output.substring(0, output.length() - 2);
				out = output;
			}
			state = INVOKE_METHOD;
		}
		else if (state == INVOKE_METHOD) //in = parameters, delimited by commas
		{
			String[] inputs = in.split(",");
			
			Object[] args = new Object[inputs.length];
			
			
			for(int i = 0; i < args.length; i++)
			{
				try {
					args[i] = StringParser.parseFromString(inputs[i]);
				} catch (ClassNotFoundException | InstantiationException
						| IllegalAccessException | IllegalArgumentException
						| InvocationTargetException | SecurityException e) {
					// TODO Auto-generated catch block
					out = "An error occurred during method invokation.";
					state = WAITING;
					return out;
				}
			}
			
			Method[] methods = CurrentClass.getDeclaredMethods();
			Method requested = null;
			for(Method m : methods)
			{
				if(m.getName().equals(MethodName))
				{
					requested = m;
					break;
				}
			}
			 
			try {
				output = "" + requested.invoke(CurrentInstance, args) + ". Hit enter to continue.";
			} catch (IllegalAccessException | IllegalArgumentException
					| InvocationTargetException e) {
				output = "The parameters were given incorrectly. Please hit enter to try again.";
			}
			
			out = output;
			state = WAITING;
		}
		if(out == null)
		{
			out = "Restarting. Please hit enter.";
			state = WAITING;
		}
		return out;
	}
	

	
}
