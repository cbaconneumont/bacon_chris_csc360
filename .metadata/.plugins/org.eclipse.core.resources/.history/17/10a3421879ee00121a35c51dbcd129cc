package server;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import server.utility.StringParser;


public class MathProtocol {
	private static final int WAITING = 0;
	private static final int REQUEST_METHOD_NAME = 1;
	private static final int REQUEST_PARAMETERS = 2;
	private static final int INVOKE_METHOD = 3;
	
	private String MethodName = "";
	private Object CurrentInstance = null;
	private Class CurrentClass = null;
	
	private int state = WAITING; //default state when the server starts
	
	public String processInput(String in)
	{
		String out = null;
		String output = "";
		
		if(state == WAITING) //in = null or is just empty to move forward
		{
			MethodName = "";
			CurrentInstance = null;
			CurrentClass = null;
			out = "What class would you like to use? Use the fully-qualified name (eg test.java3.notmathlogic.TestClass)";
			state = REQUEST_METHOD_NAME;
		}
		else if(state == REQUEST_METHOD_NAME) //in = classname, find that class
		{
			try {
				CurrentClass = Class.forName(in);
				CurrentInstance = CurrentClass.newInstance();
			} catch (ClassNotFoundException e) {
				output = "Class was not found. Hit enter to try again.";
				state = WAITING;
				return output;
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
			
			output = "What method would you like to call? Type in the name of the method you would like to choose from the following list: ";
			Method[] methods = CurrentClass.getDeclaredMethods();
			for(Method	 current : methods)
			{
				output += current.getName()+ ", ";
				
			}
			output = output.substring(0, output.length()-2);
			out = output;
			state = REQUEST_PARAMETERS;
		}
		else if (state == REQUEST_PARAMETERS) //in = methodname, find that method
		{
			
			MethodName = in;
			Method requested = null;
			Method[] methods = CurrentClass.getDeclaredMethods();
			for(Method m : methods)
			{
				if(m.getName().equals(MethodName))
				{
					requested = m;
					break;
				}
			}
			if(requested == null)
			{
				out = "The method your requested does not exist or was spelled wrong. The server is restarting.";
				MethodName = "";
				state = WAITING;
			}
			else
			{
				Class[] params = requested.getParameterTypes();
				output = "The method requires the following as parameters (please enter them separated by commas [eg 12, 13]): ";
				for(Class param : params)
				{
					output += param.getName() + ", ";
				}
				output = output.substring(0, output.length() - 2);
				out = output;
			}
			state = INVOKE_METHOD;
		}
		else if (state == INVOKE_METHOD) //in = parameters, delimited by commas
		{
			String[] inputs = in.split(",");
			
			Object[] args = new Object[inputs.length];
			for(int i = 0; i < args.length; i++)
			{
				args[i] = StringParser.parseFromString(inputs[i]);
			}
			
			Method[] methods = CurrentClass.getDeclaredMethods();
			Method requested = null;
			for(Method m : methods)
			{
				if(m.getName().equals(MethodName))
				{
					requested = m;
					break;
				}
			}
			 
			try {
				output = "" + requested.invoke(CurrentInstance, args) + ". Hit enter to continue.";
			} catch (IllegalAccessException | IllegalArgumentException
					| InvocationTargetException e) {
				output = "The parameters were given incorrectly. Please hit enter to try again.";
			}
			
			out = output;
			state = WAITING;
		}
		if(out == null)
		{
			out = "Restarting. Please hit enter.";
			state = WAITING;
		}
		return out;
	}
}
