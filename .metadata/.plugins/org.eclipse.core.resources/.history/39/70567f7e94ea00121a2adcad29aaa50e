package server;

import java.lang.reflect.Method;


public class MathProtocol {
	private static final int WAITING = 0;
	private static final int RECIEVEDQUERY = 1;
	private static final int PROCESSREQUEST = 2;
	
	private String LogicUsage = "";
	
	private int state = WAITING;
	
	public String processInput(String in) throws ClassNotFoundException
	{
		String out = null;
		
		Class logic = Class.forName("server.MathLogic");
		Method[] methods = logic.getDeclaredMethods();
		String output = "";
		if(state == WAITING)
		{
			output = "What method would you like to call? Type in the name of the method you would like to choose from the following list: ";
			
			for(Method current : methods)
			{
				output += current.getName()+ ", ";
				
			}
			output = output.substring(0, output.length()-2);
			out = output;
			state = RECIEVEDQUERY;
		}
		else if (state == RECIEVEDQUERY)
		{
			//in = the input
			LogicUsage = in;
			Method requested = null;
			for(Method m : methods)
			{
				if(m.getName().equals(LogicUsage))
				{
					requested = m;
					break;
				}
			}
			if(requested == null)
			{
				out = "The method your requested does not exist or was spelled wrong. Please try again.";
				LogicUsage = "";
				state = WAITING;
			}
			else
			{
				Class[] params = requested.getParameterTypes();
				output = "The method requires the following as parameters (please enter them separated by commas [eg 12, 13]): ";
				for(Class param : params)
				{
					output += param.getName() + ", ";
				}
				output = output.substring(0, output.length() - 2);
				out = output;
			}
			state = PROCESSREQUEST;
		}
		else if (state == PROCESSREQUEST)
		{
			//split in on commas
			//invoke the method using each param
			//set out = invokation response
			
			state = WAITING;
		}
		if(out == null)
		{
			out = "Restarting. Please hit enter.";
			state = WAITING;
			
		}
		return out;
	}
}
